postman.setGlobalVariable('basicTests', ()=> {
 pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
pm.test("Response time is less than 800ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(800);
});   
});

postman.setEnvironmentVariable('registration', ()=> {

    const registrationRequest = {
        url: pm.environment.get('url') + 'users',
        method: 'POST',
        header: {
            'Content-Type': 'application/json',
        },
        body: {
            mode: 'raw',
            raw: JSON.stringify({
                "user": {
                    username: pm.variables.replaceIn('{{$randomUserName}}'),
                    email: pm.variables.replaceIn('{{$randomEmail}}'),
                    password: pm.environment.get('passwordConduit')
                }
            })
        },
    }

    pm.sendRequest(registrationRequest, (error, response) => {
        console.log(error ? error : response.json());
        pm.environment.set("email", response.json().user.email);
        pm.environment.set("token", response.json().user.token);
        pm.environment.set("username", response.json().user.username);
    });
});


postman.setEnvironmentVariable('login', ()=> {

    const loginRequest = {
        url: pm.environment.get('url') + 'users/login',
        method: 'POST',
        header: {
            'Content-Type': 'application/json',
        },
        body: {
            mode: 'raw',
            raw: JSON.stringify({
                "user": {
                "email": pm.environment.get('email'),
                "password": pm.environment.get('passwordConduit')
                }
            })
        }
    }

    pm.sendRequest(loginRequest, (error, response) => {
        console.log(error ? error : response.json());
        pm.environment.set("token", response.json().user.token);
    });

});

postman.setEnvironmentVariable('createArticle', ()=> {

    const createArticleRequest = {
        url: pm.environment.get('url') + 'articles',
        method: 'POST',
        header: {
            'content-Type': 'application/json',
            'Authorization': 'Token' + ' ' + pm.environment.get('token'),
        },
        body: {
            mode: 'raw',
            raw: JSON.stringify({
                "article": {
                    title: pm.variables.replaceIn('{{$randomLoremSentence}}'),
                    description: pm.variables.replaceIn('{{$randomLoremSentence}}'),
                    body:  pm.variables.replaceIn('{{$randomLoremSentence}}'),
                    tagList: ""
                }
            })
        },
    }

    pm.sendRequest(createArticleRequest, (error, response) => {
    console.log(error ? error : response.json());
    pm.environment.set("slugConduit", response.json().article.slug);
    });
});

postman.setEnvironmentVariable('createComment', ()=> {

    const createCommentRequest = {
        url: pm.environment.get('url') + 'articles' + '/' + pm.environment.get('slugConduit') + '/' + 'comments',
        method: 'POST',
        header: {
            'Content-Type': 'application/json',
            'Authorization': 'Token' + ' ' + pm.environment.get('token'),
        },
        body: {
            mode: 'raw',
            raw: JSON.stringify({
                "comment": {
                    "body": pm.variables.replaceIn('{{$randomLoremSentence}}'),
                }
            })
        },
    }

    pm.sendRequest(createCommentRequest, (error, response) => {
        console.log(error ? error : response.json());
        pm.environment.set("commentId", response.json().comment.id);
    });

});
